// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Clarity
@_exported import Clarity
import CoreGraphics
import CoreTelephony
import CryptoKit
import Darwin
import Dispatch
import Foundation
import Foundation/*.Data*/
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
import zlib
@_inheritsConvenienceInitializers @objc public class ClaritySDK : ObjectiveC.NSObject {
  public typealias OnSessionStartedCallback = (Swift.String) -> Swift.Void
  @discardableResult
  @objc public static func initialize(config: Clarity.ClarityConfig) -> Swift.Bool
  @objc public static func pause()
  @objc public static func resume()
  @objc public static func isPaused() -> Swift.Bool
  @discardableResult
  @objc public static func startNewSession(callback: Clarity.ClaritySDK.OnSessionStartedCallback?) -> Swift.Bool
  @objc public static func maskView(_ view: UIKit.UIView)
  @objc public static func unmaskView(_ view: UIKit.UIView)
  @discardableResult
  @objc public static func setCustomUserId(_ customUserId: Swift.String) -> Swift.Bool
  @discardableResult
  @objc public static func setCustomSessionId(_ customSessionId: Swift.String) -> Swift.Bool
  @available(*, deprecated, message: "This function is deprecated and will be removed in a future major version. Please use `ClaritySDK.getCurrentSessionUrl()` instead.")
  @objc public static func getCurrentSessionId() -> Swift.String?
  @objc public static func getCurrentSessionUrl() -> Swift.String?
  @discardableResult
  @objc public static func setCustomTag(key: Swift.String, value: Swift.String) -> Swift.Bool
  @discardableResult
  @objc public static func sendCustomEvent(value: Swift.String) -> Swift.Bool
  @discardableResult
  @objc public static func setCurrentScreenName(_ name: Swift.String?) -> Swift.Bool
  @discardableResult
  @objc public static func setOnSessionStartedCallback(_ callback: @escaping Clarity.ClaritySDK.OnSessionStartedCallback) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum LogLevel : Swift.Int {
  case verbose
  case debug
  case info
  case warning
  case error
  case none
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class ClarityConfig : ObjectiveC.NSObject {
  @objc convenience public init(projectId: Swift.String)
  convenience public init(projectId: Swift.String, logLevel: Clarity.LogLevel = .none, applicationFramework: Clarity.ApplicationFramework = .native, customSignalsCallback: ((Swift.String, Swift.String?) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "This initializer accepts deprecated parameters that would be removed in a future major version.")
  public init(projectId: Swift.String, userId: Swift.String? = nil, logLevel: Clarity.LogLevel = .none, applicationFramework: Clarity.ApplicationFramework = .native, customSignalsCallback: ((Swift.String, Swift.String?) -> Swift.Void)? = nil)
  @available(*, deprecated, message: "This property is deprecated and would be removed in a future major version. Use `ClaritySDK.setCustomUserId(_:)` instead.")
  @objc public var userId: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var logLevel: Clarity.LogLevel {
    @objc get
    @objc set
  }
  @objc public var applicationFramework: Clarity.ApplicationFramework {
    @objc get
    @objc set
  }
  @objc public var customSignalsCallback: ((Swift.String, Swift.String?) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc public enum ApplicationFramework : Swift.Int {
  case native
  case cordova
  case reactNative
  case ionic
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SwiftUI.View {
  public func clarityMask() -> some SwiftUI.View
  
  public func clarityUnmask() -> some SwiftUI.View
  
  public func clarityFontNameHint(name: Swift.String) -> some SwiftUI.View
  
}
extension Clarity.LogLevel : Swift.Equatable {}
extension Clarity.LogLevel : Swift.Hashable {}
extension Clarity.LogLevel : Swift.RawRepresentable {}
extension Clarity.ApplicationFramework : Swift.Equatable {}
extension Clarity.ApplicationFramework : Swift.Hashable {}
extension Clarity.ApplicationFramework : Swift.RawRepresentable {}
